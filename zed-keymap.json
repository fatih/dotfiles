[
  {
    // root context, put key-bindings here that should work globally and you're
    // sure there are no other conflicting keybindings
    "context": "Workspace",
    "bindings": {
      ", b": ["task::Spawn", { "task_name": "Go Build" }],
      ", t": ["task::Spawn", { "task_name": "Go Test" }],
      ", a": ["task::Spawn", { "task_name": "Go Alternative" }],
      ", g": "git_panel::ToggleFocus",
      // ", n": "project_panel::SelectParent",
      "cmd-ctrl-c": "git_panel::FocusChanges",
      "cmd-ctrl-n": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "cmd-shift-g": "git_panel::ToggleFocus",
      "cmd-ctrl-n": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      ", space": "buffer_search::Dismiss",
      "ctrl-h": "workspace::ActivatePaneLeft",
      // "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-l": "workspace::ActivateNextPane",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-w z": "workspace::ToggleZoom",
      "ctrl-w t": "terminal_panel::ToggleFocus",
      "ctrl-w s": "pane::SplitDown",
      "ctrl-w ctrl-s": "pane::SplitDown",
      "ctrl-w v": "pane::SplitRight",
      "ctrl-w ctrl-v": "pane::SplitRight",
      "g c c": "editor::ToggleComments",
      "shift-k": "editor::Hover",
      "g shift-r": "editor::FindAllReferences",
      "g a": "editor::ToggleCodeActions",
      "g n": "editor::Rename",
      "ctrl-g": "outline::Toggle",
      ", g b": "git::Blame",
      "ctrl-p": "file_finder::Toggle",
      "j": ["vim::Down", { "display_lines": true }],
      "k": ["vim::Up", { "display_lines": true }],
      "space": "editor::SelectLargerSyntaxNode",
      "backspace": "editor::SelectSmallerSyntaxNode",
      // filetree
      ", n": "project_panel::ToggleFocus",
      "cmd-ctrl-n": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      ", v": "editor::GoToDefinitionSplit",
      "g r": "editor::FindAllReferences",
      // TODO fatih move them to be only called in diagnostic window
      "ctrl-n": "editor::GoToDiagnostic",
      "ctrl-m": "editor::GoToPreviousDiagnostic"
    }
  },
  // Center the cursor on the screen when scrolling and find all references
  {
    "context": "VimControl && !menu",
    "bindings": {
      "ctrl-d": ["workspace::SendKeystrokes", "ctrl-d z z"],
      "ctrl-u": ["workspace::SendKeystrokes", "ctrl-u z z"],
      "n": ["workspace::SendKeystrokes", "n z z"],
      "shift-n": ["workspace::SendKeystrokes", "shift-n z z"],
      "shift-g": ["workspace::SendKeystrokes", "shift-g z z"],
      "g r": "editor::FindAllReferences"
    }
  },
  {
    "context": "Editor && vim_mode == normal && (vim_operator == none || vim_operator == n) && !VimWaiting",
    "bindings": {
      ", w": "workspace::Save",
      ", q": "pane::CloseActiveItem"
    }
  },
  {
    "context": "Editor && showing_completions",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "editor::ConfirmCompletion",
      "shift-enter": "editor::Newline",
      "j j": "vim::NormalBefore",
      "j k": "vim::NormalBefore",
      "tab": "editor::ContextMenuNext",
      "shift-tab": "editor::ContextMenuPrevious",
      "g g": "editor::ContextMenuFirst",
      "shift-G": "editor::ContextMenuLast"
    }
  },
  {
    "context": "Editor && mode == full && edit_prediction",
    "bindings": {
      "tab": "editor::NextEditPrediction",
      "shift-tab": "editor::PreviousEditPrediction",
      "enter": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in insert mode
      "j j": "vim::NormalBefore",
      "j k": "vim::NormalBefore",
      "tab": "menu::SelectNext",
      "shift-tab": "menu::SelectPrevious"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "cmd-1": ["pane::ActivateItem", 0],
      "cmd-2": ["pane::ActivateItem", 1],
      "cmd-3": ["pane::ActivateItem", 2],
      "cmd-4": ["pane::ActivateItem", 3],
      "cmd-5": ["pane::ActivateItem", 4],
      "cmd-6": ["pane::ActivateItem", 5],
      "cmd-7": ["pane::ActivateItem", 6],
      "cmd-8": ["pane::ActivateItem", 7],
      "cmd-9": ["pane::ActivateItem", 8],
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "BufferSearchBar && !in_replace",
    "bindings": {
      ", space": "buffer_search::Dismiss"
    }
  },
  {
    "context": "GitPanel",
    "bindings": {
      ", q": "git_panel::Close",
      ", n": "project_panel::ToggleFocus",
      "cmd-shift-g": "git_panel::ToggleFocus"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-w t": "workspace::ToggleZoom",
      "ctrl-u": "terminal::Clear",
      "ctrl-l": ["terminal::SendKeystroke", "ctrl-l"]
    }
  },
  {
    "context": "Dock || Terminal || Editor || CommitEditor",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      ", n": "project_panel::ToggleFocus",
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      // Close project panel as project file panel on the right
      ", q": "workspace::ToggleLeftDock",
      ", e": "workspace::ToggleLeftDock",
      ":": "command_palette::Toggle",
      "%": "project_panel::NewFile",
      "/": "project_panel::NewSearchInDirectory",
      "enter": "project_panel::OpenPermanent",
      "escape": "project_panel::ToggleFocus",
      "h": "project_panel::CollapseSelectedEntry",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "l": "project_panel::ExpandSelectedEntry",
      "o": "project_panel::OpenPermanent",
      "s": "project_panel::Open",
      "shift-d": "project_panel::Delete",
      "shift-r": "project_panel::Rename",
      "t": "project_panel::OpenPermanent",
      "v": "project_panel::OpenPermanent",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst",
      "-": "project_panel::SelectParent"
    }
  }
]
